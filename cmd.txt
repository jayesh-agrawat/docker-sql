docker pull <<image>>

let image = python:3.9 [image_name:tag]

// Run and create a new container and enter into bash
docker run -it --entrypoint=bash <<image_name>>

/**
 * This command runs a Docker container in interactive mode with the entrypoint set to bash.
 * It also sets an environment variable ARG_NAME with the value ARG_VALUE.
 * Replace <<image_name>> with the name of the Docker image you want to run.
 */
docker run -it --entrypoint=bash -e ARG_NAME=ARG_VALUE <<image_name>>

// Execute a command in a running container
docker exec -it <<container_name>> bash 

// Start a container
docker start -i <<container_name>>

// Stop a container
docker stop <<container_name>>

// List all running containers
docker ps

// List all containers (including stopped ones)
docker ps -a

// Remove a container
docker rm <<container_name>>

// Remove an image
docker rmi <<image_name>>

// Build an image from a Dockerfile
docker build -t <<image_name>> .

// Tag an image
docker tag <<image_name>> <<new_image_name>>

// Push an image to a registry
docker push <<image_name>>

docker run  \                                                                                   
    -e POSTGRES_USER="root" \
    -e POSTGRES_PASSWORD="root" \
    -e POSTGRES_DB="ny_taxi" \
    -v "$(pwd)/nyp_taxi_pg_data:/var/lib/postgresql/data" \
    -p 5432:5432 \
    postgres:13 \

docker run -e POSTGRES_USER="root" \
    -e POSTGRES_PASSWORD="root" \
    -e POSTGRES_DB="ny_taxi" \
    -v "$(pwd)/nyp_taxi_pg_data:/var/lib/postgresql/data" \
    -p 5432:5432 \
    postgres:13


# The '-it' option allows you to interact with the container via the terminal.

# The '-v' option mounts a volume from the host to the container.
# This maps the 'nyp_taxi_pg_data' directory in the current directory on the host
# to the '/var/lib/postgresql/data' directory in the container.
# This is where PostgreSQL stores its data.
-v "$(pwd)/nyp_taxi_pg_data:/var/lib/postgresql/data" \

# The '-p' option maps a network port from the host to the container.
# Here, we're mapping port 5432 on the host to port 5432 on the container.
# This is the default port that PostgreSQL listens on.
-p 5432:5432 \

## PGADMIN

docker pull dpage/pgadmin4

docker run -it \
    -e PGADMIN_DEFAULT_EMAIL="admin@admin.com" \ 
    -e PGADMIN_DEFAULT_PASSWORD="root" \
    -p 8080:80 \
    dpage/pgadmin4

## network
docker network create pg-network


docker run -it \
    -e POSTGRES_USER="root" \
    -e POSTGRES_PASSWORD="root" \
    -e POSTGRES_DB="ny_taxi" \
    -v "$(pwd)/nyp_taxi_pg_data:/var/lib/postgresql/data" \
    --network=pg-network \
    --name pg-database \
    -p 5432:5432 \
    postgres:13


docker run -it \
    -e PGADMIN_DEFAULT_EMAIL="admin@admin.com" \
    -e PGADMIN_DEFAULT_PASSWORD="root" \
    -p 8080:80 \
    --network=pg-network \
    --name pg-admin \
    dpage/pgadmin4


jupyter nbconvert --to=script notebooks/Upload-data.ipynb 

URL="https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2021-01.parquet"

python3 ingest_data.py \
    --user=root \
    --password=root \
    --host=localhost \
    --port=5432 \
    --database=ny_taxi \
    --table=yellow_taxi_trips \
    --url=${URL} 